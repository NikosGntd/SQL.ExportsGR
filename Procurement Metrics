
CREATE TABLE Suppliers (
  SupplierID INT PRIMARY KEY,
  SupplierName VARCHAR(50),
  ContactName VARCHAR(50),
  Address VARCHAR(100),
  City VARCHAR(50),
  State VARCHAR(50),
  Country VARCHAR(50),
  PostalCode VARCHAR(20),
  Phone VARCHAR(20)
);


CREATE TABLE Products (
  ProductID INT PRIMARY KEY,
  ProductName VARCHAR(50),
  SupplierID INT,
  Category VARCHAR(50),
  UnitPrice DECIMAL(10, 2),
  UnitsInStock INT,
  FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID)
);


CREATE TABLE Orders (
  OrderID INT PRIMARY KEY,
  OrderDate DATE,
  SupplierID INT,
  FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID)
);


CREATE TABLE OrderItems (
  OrderItemID INT PRIMARY KEY,
  OrderID INT,
  ProductID INT,
  Quantity INT,
  UnitPrice DECIMAL(10, 2),
  FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
  FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);


CREATE TABLE Customers (
  CustomerID INT PRIMARY KEY,
  CustomerName VARCHAR(50),
  ContactName VARCHAR(50),
  Address VARCHAR(100),
  City VARCHAR(50),
  State VARCHAR(50),
  Country VARCHAR(50),
  PostalCode VARCHAR(20),
  Phone VARCHAR(20)
);


CREATE TABLE PurchaseOrders (
  PurchaseOrderID INT PRIMARY KEY,
  OrderID INT,
  CustomerID INT,
  OrderDate DATE,
  DeliveryDate DATE,
  Status VARCHAR(50),
  FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
  FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);


CREATE TABLE PurchaseOrderItems (
  PurchaseOrderItemID INT PRIMARY KEY,
  PurchaseOrderID INT,
  ProductID INT,
  Quantity INT,
  UnitPrice DECIMAL(10, 2),
  FOREIGN KEY (PurchaseOrderID) REFERENCES PurchaseOrders(PurchaseOrderID),
  FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);


CREATE TABLE Payment (
  PaymentID INT PRIMARY KEY,
  PurchaseOrderID INT,
  Amount DECIMAL(10, 2),
  PaymentDate DATE,
  FOREIGN KEY (PurchaseOrderID) REFERENCES PurchaseOrders(PurchaseOrderID)
);




INSERT INTO Suppliers (SupplierID, SupplierName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (1, 'ABC Suppliers', 'John Doe', '123 Main Street', 'New York', 'NY', 'USA', '10001', '123-456-7890');

INSERT INTO Suppliers (SupplierID, SupplierName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (2, 'XYZ Suppliers', 'Jane Smith', '456 Oak Avenue', 'Los Angeles', 'CA', 'USA', '90001', '987-654-3210');

INSERT INTO Suppliers (SupplierID, SupplierName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (3, '123 Suppliers', 'Bob Johnson', '789 Elm Street', 'Chicago', 'IL', 'USA', '60601', '555-123-4567');

INSERT INTO Suppliers (SupplierID, SupplierName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (4, 'Best Suppliers', 'Sarah Brown', '321 Pine Avenue', 'Miami', 'FL', 'USA', '33101', '777-888-9999');

INSERT INTO Suppliers (SupplierID, SupplierName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (5, 'Global Suppliers', 'Michael Lee', '555 Maple Lane', 'Houston', 'TX', 'USA', '77001', '111-222-3333');

INSERT INTO Products (ProductID, ProductName, SupplierID, Category, UnitPrice, UnitsInStock)
VALUES (1, 'Widget A', 1, 'Widgets', 10.99, 50);

INSERT INTO Products (ProductID, ProductName, SupplierID, Category, UnitPrice, UnitsInStock)
VALUES (2, 'Gadget B', 2, 'Gadgets', 19.99, 100);

INSERT INTO Products (ProductID, ProductName, SupplierID, Category, UnitPrice, UnitsInStock)
VALUES (3, 'Widget C', 1, 'Widgets', 8.99, 20);

INSERT INTO Products (ProductID, ProductName, SupplierID, Category, UnitPrice, UnitsInStock)
VALUES (4, 'Gizmo X', 2, 'Gizmos', 14.99, 75);

INSERT INTO Products (ProductID, ProductName, SupplierID, Category, UnitPrice, UnitsInStock)
VALUES (5, 'Widget D', 3, 'Widgets', 12.99, 30


INSERT INTO Orders (OrderID, OrderDate, SupplierID)
VALUES (1, '2023-06-01', 1);

INSERT INTO Orders (OrderID, OrderDate, SupplierID)
VALUES (2, '2023-06-03', 2);

INSERT INTO Orders (OrderID, OrderDate, SupplierID)
VALUES (3, '2023-06-05', 1);

INSERT INTO Orders (OrderID, OrderDate, SupplierID)
VALUES (4, '2023-06-07', 2);

INSERT INTO Orders (OrderID, OrderDate, SupplierID)
VALUES (5, '2023-06-09', 1);

INSERT INTO OrderItems (OrderItemID, OrderID, ProductID, Quantity, UnitPrice)
VALUES (1, 1, 1, 5, 10.99);

INSERT INTO OrderItems (OrderItemID, OrderID, ProductID, Quantity, UnitPrice)
VALUES (2, 1, 2, 3, 19.99);

INSERT INTO OrderItems (OrderItemID, OrderID, ProductID, Quantity, UnitPrice)
VALUES (3, 2, 3, 2, 8.99);

INSERT INTO OrderItems (OrderItemID, OrderID, ProductID, Quantity, UnitPrice)
VALUES (4, 2, 1, 10, 10.99);

INSERT INTO OrderItems (OrderItemID, OrderID, ProductID, Quantity, UnitPrice)
VALUES (5, 3, 4, 7, 14.99);


INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (1, 'ABC Company', 'Mark Johnson', '789 Elm Street', 'Chicago', 'IL', 'USA', '60601', '555-123-4567');

INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (2, 'XYZ Corporation', 'Emily Davis', '321 Pine Avenue', 'Miami', 'FL', 'USA', '33101', '777-888-9999');

INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (3, 'Best Industries', 'Sam Wilson', '555 Maple Lane', 'Houston', 'TX', 'USA', '77001', '111-222-3333');

INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (4, 'Global Corp', 'Rachel Miller', '123 Main Street', 'New York', 'NY', 'USA', '10001', '123-456-7890');

INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, State, Country, PostalCode, Phone)
VALUES (5, 'Tech Solutions', 'John Smith', '456 Oak Avenue', 'Los Angeles', 'CA', 'USA', '90001', '987-654-3210');


INSERT INTO PurchaseOrders (PurchaseOrderID, OrderID, CustomerID, OrderDate, DeliveryDate, Status)
VALUES (1, 1, 1, '2023-06-01', '2023-06-10', 'Pending');

INSERT INTO PurchaseOrders (PurchaseOrderID, OrderID, CustomerID, OrderDate, DeliveryDate, Status)
VALUES (2, 2, 2, '2023-06-03', '2023-06-12', 'Pending');

INSERT INTO PurchaseOrders (PurchaseOrderID, OrderID, CustomerID, OrderDate, DeliveryDate, Status)
VALUES (3, 3, 1, '2023-06-05', '2023-06-15', 'Pending');

INSERT INTO PurchaseOrders (PurchaseOrderID, OrderID, CustomerID, OrderDate, DeliveryDate, Status)
VALUES (4, 4, 2, '2023-06-07', '2023-06-18', 'Pending');

INSERT INTO PurchaseOrders (PurchaseOrderID, OrderID, CustomerID, OrderDate, DeliveryDate, Status)
VALUES (5, 5, 1, '2023-06-09', '2023-06-20', 'Pending');


INSERT INTO PurchaseOrderItems (PurchaseOrderItemID, PurchaseOrderID, ProductID, Quantity, UnitPrice)
VALUES (1, 1, 1, 5, 10.99);

INSERT INTO PurchaseOrderItems (PurchaseOrderItemID, PurchaseOrderID, ProductID, Quantity, UnitPrice)
VALUES (2, 1, 2, 3, 19.99);

INSERT INTO PurchaseOrderItems (PurchaseOrderItemID, PurchaseOrderID, ProductID, Quantity, UnitPrice)
VALUES (3, 2, 3, 2, 8.99);

INSERT INTO PurchaseOrderItems (PurchaseOrderItemID, PurchaseOrderID, ProductID, Quantity, UnitPrice)
VALUES (4, 2, 1, 10, 10.99);

INSERT INTO PurchaseOrderItems (PurchaseOrderItemID, PurchaseOrderID, ProductID, Quantity, UnitPrice)
VALUES (5, 3, 4, 7, 14.99);


INSERT INTO Payment (PaymentID, PurchaseOrderID, Amount, PaymentDate)
VALUES (1, 1, 54.95, '2023-06-15');

INSERT INTO Payment (PaymentID, PurchaseOrderID, Amount, PaymentDate)
VALUES (2, 2, 89.97, '2023-06-18');

INSERT INTO Payment (PaymentID, PurchaseOrderID, Amount, PaymentDate)
VALUES (3, 3, 35.98, '2023-06-20');

INSERT INTO Payment (PaymentID, PurchaseOrderID, Amount, PaymentDate)
VALUES (4, 4, 104.93, '2023-06-23');

INSERT INTO Payment (PaymentID, PurchaseOrderID, Amount, PaymentDate)
VALUES (5, 5, 90.93, '2023-06-25');


--Retrieve the total revenue generated from each purchase order
SELECT po.PurchaseOrderID, SUM(poi.Quantity * poi.UnitPrice) AS TotalRevenue
FROM PurchaseOrders po
JOIN PurchaseOrderItems poi ON po.PurchaseOrderID = poi.PurchaseOrderID
GROUP BY po.PurchaseOrderID;

--Retrieve the products that have been ordered but are currently out of stock
SELECT p.ProductID, p.ProductName
FROM Products p
JOIN OrderItems oi ON p.ProductID = oi.ProductID
WHERE oi.Quantity > 0 AND p.UnitsInStock = 0;

--Retrieve the customers who have placed multiple purchase orders
SELECT c.CustomerID, c.CustomerName, COUNT(po.PurchaseOrderID) AS TotalOrders
FROM Customers c
JOIN PurchaseOrders po ON c.CustomerID = po.CustomerID
GROUP BY c.CustomerID, c.CustomerName
HAVING COUNT(po.PurchaseOrderID) > 1;

--Retrieve the top 5 suppliers with the highest total revenue from orders
SELECT s.SupplierID, s.SupplierName, SUM(poi.Quantity * poi.UnitPrice) AS TotalRevenue
FROM Suppliers s
JOIN Products p ON s.SupplierID = p.SupplierID
JOIN OrderItems oi ON p.ProductID = oi.ProductID
GROUP BY s.SupplierID, s.SupplierName
ORDER BY TotalRevenue DESC
LIMIT 5;

--Retrieve the customers who have made payments for all their purchase orders
SELECT c.CustomerID, c.CustomerName
FROM Customers c
JOIN PurchaseOrders po ON c.CustomerID = po.CustomerID
LEFT JOIN Payment pm ON po.PurchaseOrderID = pm.PurchaseOrderID
GROUP BY c.CustomerID, c.CustomerName
HAVING COUNT(po.PurchaseOrderID) = COUNT(pm.PurchaseOrderID);

--Undamaged shipment rate
SELECT COUNT(*) AS TotalShipments,
       COUNT(CASE WHEN IsDamaged = 0 THEN 1 END) AS UndamagedShipments,
       COUNT(CASE WHEN IsDamaged = 0 THEN 1 END) / COUNT(*) * 100 AS UndamagedShipmentRate
FROM Shipments;

--Purchase order cycle time
SELECT AVG(DATEDIFF(Day, OrderDate, DeliveryDate)) AS AverageCycleTime
FROM PurchaseOrders;

--Cost savings as a percentage of spend
SELECT SUM(SavingsAmount) / SUM(TotalSpend) * 100 AS CostSavingsPercentage
FROM Purchases;

--Supplier lead time
SELECT SupplierID,
       AVG(DATEDIFF(Day, OrderDate, DeliveryDate)) AS AverageLeadTime
FROM PurchaseOrders
GROUP BY SupplierID;

--Purchase order accuracy rate
SELECT COUNT(*) AS TotalOrders,
       COUNT(CASE WHEN IsCorrect = 1 THEN 1 END) AS CorrectOrders,
       COUNT(CASE WHEN IsCorrect = 1 THEN 1 END) / COUNT(*) * 100 AS OrderAccuracyRate
FROM Orders;

--Percentage of on-time deliveries
SELECT COUNT(*) AS TotalDeliveries,
       COUNT(CASE WHEN DeliveryDate <= ExpectedDeliveryDate THEN 1 END) AS OnTimeDeliveries,
       COUNT(CASE WHEN DeliveryDate <= ExpectedDeliveryDate THEN 1 END) / COUNT(*) * 100 AS OnTimeDeliveryPercentage
FROM Deliveries;

--Percentage of orders placed electronically
SELECT COUNT(*) AS TotalOrders,
       COUNT(CASE WHEN IsElectronic = 1 THEN 1 END) AS ElectronicOrders,
       COUNT(CASE WHEN IsElectronic = 1 THEN 1 END) / COUNT(*) * 100 AS ElectronicOrderPercentage
FROM Orders;
